grade_level,
total_annual_pay,
--rating_cd,
--rating_long_name,
--duty_station_city,
--duty_station_county_long_name,
--duty_station_country_long_name,
duty_station_state_cd
--duty_station_state_name,
--locatlity_pay_long_name,
--cbsa_long_name,
--csa_long_name,
--duty_station_territory_long_name,
--msa_long_name,
--cmsa_long_name,
--leo_geo_long_name,
--duty_station_area_long_name,
--duty_station_town_long_name,
--duty_station_region_long_name
FROM
dmennealy.pulse2_ehri
WHERE ehri_token IS NOT NULL;")
analysis_dataset_2 <- dt_pulse2_ehri
rm(dt_pulse2_ehri)
# Recode "RESPONSE" as 1 or 0
# Right now no response is NA
analysis_dataset_2$RESPONSE[is.na(analysis_dataset_2$RESPONSE)] <- 0
# Resolve duplicates ----
# Remove duplicates
# Keep based on 1) response,
# 2) longer length of service,
# 3) higher total annual pay
# If these three variables are all equal,
# The first row will be kept.
nrow(analysis_dataset_2)
analysis_dataset_2 <- analysis_dataset_2 %>%
group_by(EHRI_TOKEN) %>%
arrange(desc(RESPONSE), desc(LENGTH_OF_SERVICE_MONTHS), desc(TOTAL_ANNUAL_PAY)) %>%
slice_head() %>%
ungroup()
nrow(analysis_dataset_2)
# Explore and transform variables ----
# Transform variables into factors
to_factors <- c('AGENCY', 'COMPONENT', 'SUB_COMPONENT',
'SENT_SURVEY_TRACK',
'GENDER', 'RACE_SHORT_NAME',
'RACE_LONG_NAME', 'RACE_BRIDGE_LONG_NAME',
'DISABILITY_SHORT_NAME', 'VETERANS_STATUS_LONG_NAME',
'EDUCATION_LEVEL_SHORT_NAME',
'JOB_CATEGORY_CD', 'JOB_GROUP_CD', 'JOB_SERIES',
'SUPERVISOR_LONG_NAME', 'WORK_SCHEDULE_LONG_NAME',
'TENURE_SHORT_NAME', 'TLWRK_ELIG_IND',
'PAY_PLAN_CD', 'GRADE_LEVEL')
analysis_dataset_2 <- mutate_at(analysis_dataset_2,
.vars = to_factors,
as.factor)
### ...create education factor ----
analysis_dataset_2 <- mutate(analysis_dataset_2,
education_factor = factor(case_when(
EDUCATION_LEVEL %in% c("01", "02", "03") ~
"Less than High School",
EDUCATION_LEVEL %in% c("04", "05") ~
"High School Diploma_GED or equivalent",
EDUCATION_LEVEL %in% c("06") ~
"Trade or Technical Certificate",
EDUCATION_LEVEL %in% c("07", "08", "09", "11", "12") ~
"Some college (no degree)",
EDUCATION_LEVEL %in% c("10") ~
"Associate's Degree",
EDUCATION_LEVEL %in% c("13", "14", "19", "20") ~
"Bachelor's Degree",
EDUCATION_LEVEL %in% c("17", "18") ~
"Master's Degree",
EDUCATION_LEVEL %in% c("15", "16", "21", "22") ~
"Doctoral_Professional Degree",
TRUE ~ NA_character_
)))
table(analysis_dataset_2$education_factor, useNA = "ifany")
analysis_dataset_2 <- pulse::impute_education_factor(x = analysis_dataset_2)
### ...transform race variables ------
analysis_dataset_2 <- mutate(analysis_dataset_2,
race_factor = factor(case_when(
RACE_LONG_NAME == "BLACK AFRICAN AMERICAN" ~
"Black African American",
RACE_LONG_NAME == "WHITE" ~ "White",
RACE_LONG_NAME == "ASIAN" ~ "Asian",
RACE_LONG_NAME == "AMERICAN INDIAN" ~ "American Indian",
RACE_LONG_NAME %in% c("HAWAIIAN PACIFIC ISLANDER", "PAC ISL") ~
"Hawaiian Pacific Islander",
RACE_LONG_NAME %in% c("No Data Reported", "NOT A RACE", "Invalid") ~
"No race reported",
grepl(",", RACE_LONG_NAME) ~ "Two or more races"
)))
table(analysis_dataset_2$race_factor, useNA = "ifany")
stopifnot(sum(is.na(analysis_dataset_2$race_factor)) == 0)
### ...transform gender variable ------
table(analysis_dataset_2$GENDER, useNA = "ifany")
# There are 8 records where gender is recorded as *
# Impute gender by most common within agency and component
analysis_dataset_2 <- analysis_dataset_2 %>% group_by(AGENCY, COMPONENT) %>%
mutate(GENDER = if_else(GENDER == "*",
getmode(GENDER),
GENDER)) %>%
ungroup()
table(analysis_dataset_2$GENDER, useNA = "ifany")
### ...create ethnicity factor
analysis_dataset_2 <- mutate(analysis_dataset_2,
ethnicity_factor = factor(case_when(
RACE_SHORT_NAME == "HISPANIC" ~ "Hispanic",
RACE_SHORT_NAME == "NO ETHNICITY" ~ "Not Hispanic",
RACE_SHORT_NAME %in% c("No Data Reported", "Invalid") ~
"No ethnicity reported"
)))
table(analysis_dataset_2$ethnicity_factor, useNA = "ifany")
stopifnot(sum(is.na(analysis_dataset_2$ethnicity_factor)) == 0)
### ...create age buckets -------
analysis_dataset_2 <- mutate(analysis_dataset_2,
age_factor = factor(case_when(
AGE_YEARS <= 25 ~ "25 and under",
AGE_YEARS %in% 26:29 ~ "26-29 years old",
AGE_YEARS %in% 30:39 ~ "30-39 years old",
AGE_YEARS %in% 40:49 ~ "40-49 years old",
AGE_YEARS %in% 50:59 ~ "50-59 years old",
AGE_YEARS >= 60 ~ "60 or older"
)))
table(analysis_dataset_2$age_factor, useNA = "ifany")
# There are three NAs for age factor. Impute by mode of agency.
analysis_dataset_2 <- analysis_dataset_2 %>% group_by(AGENCY) %>%
mutate(age_factor = if_else(is.na(age_factor),
getmode(age_factor),
age_factor)) %>%
ungroup()
table(analysis_dataset_2$age_factor, useNA = "ifany")
stopifnot(sum(is.na(analysis_dataset_2$age_factor)) == 0)
### ...create length of service buckets ----
analysis_dataset_2 <- mutate(analysis_dataset_2,
length_of_service_factor = factor(case_when(
LENGTH_OF_SERVICE_YEARS < 1 ~ "Less than 1 year",
LENGTH_OF_SERVICE_YEARS %in% 1:3 ~ "1 to 3 years",
LENGTH_OF_SERVICE_YEARS %in% 4:5 ~ "4 to 5 years",
LENGTH_OF_SERVICE_YEARS %in% 6:10 ~ "6 to 10 years",
LENGTH_OF_SERVICE_YEARS %in% 11:14 ~ "11 to 14 years",
LENGTH_OF_SERVICE_YEARS %in% 15:20 ~ "15 to 20 years",
LENGTH_OF_SERVICE_YEARS > 20 ~ "More than 20 years"
)))
table(analysis_dataset_2$length_of_service_factor, useNA = "ifany")
# There are 2 NAs for length of service factor. Impute by mode of agency.
analysis_dataset_2 <- analysis_dataset_2 %>% group_by(AGENCY) %>%
mutate(length_of_service_factor = if_else(is.na(length_of_service_factor),
getmode(length_of_service_factor),
length_of_service_factor)) %>%
ungroup()
table(analysis_dataset_2$length_of_service_factor, useNA = "ifany")
stopifnot(sum(is.na(analysis_dataset_2$length_of_service_factor)) == 0)
### ...create veteran status factor variable ----
analysis_dataset_2 <- mutate(analysis_dataset_2,
veteran_status_factor = factor(case_when(
VETERANS_STATUS_LONG_NAME %in%
c("NOT A VETERAN",
"NOT A VETERAN (ASSUMPTION BASED ON VETERANS PREFERENCE)") ~
"Not a veteran",
VETERANS_STATUS_LONG_NAME %in%
c("POST-VIETNAM-ERA VETERAN", "PRE-VIETNAM-ERA VETERAN",
"VETERAN, ERA UNKNOWN (BASED ON VETERANS PREFERENCE)",
"VIETNAM-ERA VETERAN") ~ "Veteran",
VETERANS_STATUS_LONG_NAME == "EXEMPT FROM REPORTING" ~
"Exempt from reporting veteran status"
)
))
table(analysis_dataset_3$veteran_status_factor, useNA = "ifany")
stopifnot(sum(is.na(analysis_dataset_3$veteran_status_factor)) == 0)
### ...create disability factor variable ----
analysis_dataset_2 <- mutate(analysis_dataset_2,
disability_factor = factor(case_when(
DISABILITY_SHORT_NAME %in% c("I DO NOT HAVE A DISABILITY OR SERIOUS",
"NO HANDICAP", "Invalid") # There are 69 records with value 'Invalid'
~ "No disability identified",
DISABILITY_SHORT_NAME == "I DO NOT WISH TO IDENTIFY MY DISABILITY" ~
"Does not wish to identify disability",
!is.na(DISABILITY_SHORT_NAME) & ! DISABILITY_SHORT_NAME %in%
c("I DO NOT HAVE A DISABILITY OR SERIOUS", "NO HANDICAP",
"I DO NOT WISH TO IDENTIFY MY DISABILITY") ~
"Disability identified"
)))
table(analysis_dataset_2$disability_factor, useNA = "ifany")
stopifnot(sum(is.na(analysis_dataset_2$disability_factor)) == 0)
### ...create supervisor status factor variable -----
analysis_dataset_2 <- mutate(analysis_dataset_2,
supervisor_status_factor = factor(case_when(
SUPERVISOR_LONG_NAME == "ALL OTHER POSITIONS" ~
"Not supervisor, manager, or team leader",
SUPERVISOR_LONG_NAME %in%
c("LEADER", "MANAGEMENT OFFICIAL (CSRA)",
"SUPERVISOR (CSRA)", "SUPERVISOR OR MANAGER",
"TEAM LEADER") ~
"Supervisor, manager, or team leader",
SUPERVISOR_LONG_NAME == "Invalid" ~ NA_character_
)))
table(analysis_dataset_2$supervisor_status_factor, useNA = "ifany")
# There are 60 NAs for supervisory status
# Impute by mode of component and grade code
analysis_dataset_2 <- analysis_dataset_2 %>% group_by(AGENCY, COMPONENT, GRADE_LEVEL) %>%
mutate(supervisor_status_factor = if_else(is.na(supervisor_status_factor),
getmode(supervisor_status_factor),
supervisor_status_factor)) %>%
ungroup()
table(analysis_dataset_2$supervisor_status_factor, useNA = "ifany")
stopifnot(sum(is.na(analysis_dataset_2$supervisor_status_factor)) == 0)
### ...create work schedule factor variable ----
analysis_dataset_2 <- mutate(analysis_dataset_2,
work_schedule_factor = factor(case_when(
WORK_SCHEDULE_LONG_NAME == "FULL-TIME" ~ "Full-time work schedule",
WORK_SCHEDULE_LONG_NAME %in%
c("A SCHEDULE REQUIRED WHEN AN EMPLOYEE HAS ELECTED PHASED EMPLOYMENT/PHASED RETIREMENT STATUS AND HAS A LESS THA",
"BAYLOR PLAN", "FULL-TIME SEASONAL",
"INTERMITTENT", "INTERMITTENT SEASONAL",
"Invalid", "PART-TIME", "PART-TIME JOB SHARER",
"PART-TIME SEASONAL") ~ "Work schedule other than full time"
)))
table(analysis_dataset_2$work_schedule_factor, useNA = "ifany")
stopifnot(sum(is.na(analysis_dataset_2$work_schedule_factor)) == 0)
### ...create job series factor variable ----
analysis_dataset_2 <- mutate(analysis_dataset_2,
job_series_factor = factor(case_when(
JOB_SERIES %in% c('1102', '1105', '1106') ~ "Acquisition",
JOB_SERIES %in% c('2210') ~ "IT",
JOB_SERIES %in% c('0510', '0501') ~ "Financial management",
JOB_SERIES %in% c('0201') ~ "Human capital",
TRUE ~ "Non-mission support job series"
)))
table(analysis_dataset_2$job_series_factor, useNA = "ifany")
### ...create location factor variable ----
analysis_dataset_2 <- mutate(analysis_dataset_2,
location_factor = factor(case_when(
DUTY_STATION_STATE_CD %in% c('DC', 'VA', 'MD') ~ "DC, VA, MD duty station",
TRUE ~ "Other duty station"
)))
table(analysis_dataset_2$location_factor, useNA = "ifany")
### ...examine whether TOTAL_ANNUAL_PAY is continuous ----
max(analysis_dataset_2$TOTAL_ANNUAL_PAY, na.rm = T)
ggplot(analysis_dataset_2, aes(x = TOTAL_ANNUAL_PAY)) +
geom_histogram()
br = seq(0, 500000, by = 10000)
ranges = paste(head(br,-1), br[-1], sep = " - ")
freq = hist(analysis_dataset_2$TOTAL_ANNUAL_PAY, breaks = br,
include.lowest = TRUE)
sink(file = 'salary_freq_counts.txt')
data.frame(range = ranges, frequency = freq$counts)
sink()
### ...impute missing TOTAL_ANNUAL_PAY ----
# first try to impute TOTAL_ANNUAL_PAY as median by component, grade code
analysis_dataset_2 <- analysis_dataset_2 %>% group_by(AGENCY, COMPONENT, GRADE_LEVEL) %>%
mutate(total_annual_pay_imputed = if_else(is.na(TOTAL_ANNUAL_PAY),
median(TOTAL_ANNUAL_PAY, na.rm = TRUE),
TOTAL_ANNUAL_PAY)) %>%
ungroup()
sum(is.na(analysis_dataset_2$total_annual_pay_imputed))
# Now there are 146 NAs. Impute as median by
# component, supervisory status, and education
analysis_dataset_2 <- analysis_dataset_2 %>% group_by(AGENCY, COMPONENT,
supervisor_status_factor,
education_factor) %>%
mutate(total_annual_pay_imputed = if_else(is.na(TOTAL_ANNUAL_PAY),
median(TOTAL_ANNUAL_PAY, na.rm = TRUE),
TOTAL_ANNUAL_PAY)) %>%
ungroup()
sum(is.na(analysis_dataset_2$total_annual_pay_imputed))
# There are no NAs left for total_annual_pay_imputed
# ...impute telework eligibility factor by component and grade code ----
analysis_dataset_2 <- analysis_dataset_2 %>% group_by(AGENCY, COMPONENT,
GRADE_LEVEL) %>%
mutate(telework_eligibility_factor = if_else(! TLWRK_ELIG_IND %in% c("Y", "N") | is.na(TLWRK_ELIG_IND),
getmode(TLWRK_ELIG_IND),
TLWRK_ELIG_IND)) %>%
mutate(telework_eligibility_factor = if_else(! TLWRK_ELIG_IND %in% c("Y", "N") | is.na(TLWRK_ELIG_IND),
"N",
TLWRK_ELIG_IND)) %>%
# There was 1 row going to " " with getmode, assigning to N as most common
# Removing unused levels, which were blank or '*' in TLWRK_ELIG_IND
ungroup()
table(analysis_dataset_2$telework_eligibility_factor, useNA = "ifany")
# Write summary stats to text files ----
sum_na <- function(x){sum(is.na(x))}
sink(file = 'summary-stats_2.txt')
lapply(analysis_dataset_2, sum_na)
for (n in 1:length(colnames(analysis_dataset_2))){
cn <- colnames(analysis_dataset_2[, n])
if (cn %in% c("EMAIL", "RESPONSE", "UNIQUE_PERSON_PK",
"WORK_EMAIL")){
next
}
if (startsWith(cn, "ENGAGEMENT")){
next
}
if (startsWith(cn, "EQUITY")){
next
}
if (startsWith(cn, "REENTRY")){
next
}
if (startsWith(cn, "TOTAL_ANNUAL_PAY")){
print("Summary of 'TOTAL_ANNUAL_PAY' column")
print(summary(analysis_dataset_2[, n]))
next
}
if (startsWith(cn, "total_annual_imputed_pay")){
print("Summary of 'total_annual_imputed_pay' column")
print(summary(analysis_dataset_2[, n]))
next
}
print(cn)
print(str(analysis_dataset_2[, n]))
print(sort(table(analysis_dataset_2[, n], useNA = "ifany"), decreasing = T))
}
sink()
#
# # Create weighting sets  ----
# # See weighting set if we weighted all components with >= 500
# # employees on their own
# new_cell_threshold <- 500
# minimum_cell_size <- 200
#
# component_cells <- data.frame()
# sub_component_cells <- data.frame()
#
# cells <- analysis_dataset_2 %>%
#   group_by(AGENCY, COMPONENT) %>%
#   summarize(n = n()) %>%
#   arrange(AGENCY, desc(n))
#
# agency_list <- unique(cells$AGENCY)
# agency_cells <- data.frame()
#
# calc_max_cell_1 <- function(){
#   out <- max(component_cells$n[component_cells$cell_number_component == 1 &
#                       component_cells$COMPONENT != 'Other' &
#                        ! is.na(component_cells$COMPONENT)])
#   return(out)
# }
# max_cell_1 <- calc_max_cell_1()
#
# calc_sum_cell_1 <- function(){
#   out <- sum(component_cells$n[component_cells$cell_number_component == 1])
#   return(out)
# }
# sum_cell_1 <- calc_sum_cell_1()
#
# for(a in agency_list){
#   print(paste0("now splitting agency ", a, " into cells"))
#
#   cells <- analysis_dataset_2 %>%
#     group_by(AGENCY, COMPONENT) %>%
#     summarize(n = n()) %>%
#     arrange(AGENCY, desc(n))
#
#   component_cells <- cells %>%
#     filter(AGENCY == a) %>%
#     mutate(cell_number_component = 1) %>%
#     group_by(cell_number_component) %>%
#     mutate(cell_size = sum(n))
#
#   max_cell_1 <- calc_max_cell_1()
#   sum_cell_1 <- calc_sum_cell_1()
#
#   new_cell_number <- 1
#
# while(max_cell_1 > new_cell_threshold &
#       sum_cell_1 - max_cell_1  > minimum_cell_size){
#     new_cell_number = new_cell_number + 1
#     component_cells <- component_cells %>%
#       mutate(cell_number_component = ifelse(n == max_cell_1, new_cell_number, cell_number_component)) %>%
#       group_by(cell_number_component) %>%
#       mutate(cell_size = sum(n)) %>%
#       ungroup()
#     print("update component cell number")
#
#     max_cell_1 <- calc_max_cell_1()
#     sum_cell_1 <- calc_sum_cell_1()
#     print(max_cell_1)
#     print(sum_cell_1)
#   }
#   agency_cells <- rbind(agency_cells, component_cells)
#
#   ## Create weighting cells for subcomponents ----
#   cells <- analysis_dataset_2 %>%
#     group_by(AGENCY, COMPONENT, SUB_COMPONENT) %>%
#     filter(AGENCY == a) %>%
#     summarize(n = n()) %>%
#     arrange(AGENCY, desc(n))
#
#   component_list <- unique(cells$COMPONENT)
#
#   calc_max_cell_1_sub <- function(){
#     out <- max(sub_c_cells$n[sub_c_cells$cell_number_subcomponent == 1 &
#                                sub_c_cells$SUB_COMPONENT != 'Other' &
#                                ! is.na(sub_c_cells$SUB_COMPONENT)])
#     return(out)
#   }
#
#   calc_sum_cell_1_sub <- function(){
#     out <- sum(sub_c_cells$n[sub_c_cells$cell_number_subcomponent == 1])
#     return(out)
#   }
#
#   # Create sub-component cells
#   for(c in component_list){
#     print(paste0("now splitting component ", c, " into cells"))
#     cell_number_iter <- 1
#     new_cell_number <- cell_number_iter
#
#     sub_c_cells <- cells %>%
#       filter(COMPONENT == c) %>%
#       mutate(cell_number_subcomponent = cell_number_iter) %>%
#       group_by(cell_number_subcomponent) %>%
#       mutate(cell_size = sum(n))
#
#     max_cell_1_sub <- calc_max_cell_1_sub()
#     sum_cell_1_sub <- calc_sum_cell_1_sub()
#
#     while(max_cell_1_sub > new_cell_threshold &
#           sum_cell_1_sub - max_cell_1_sub  > minimum_cell_size){
#       new_cell_number = new_cell_number + 1
#       sub_c_cells <- sub_c_cells %>%
#         mutate(cell_number_subcomponent = ifelse(n == max_cell_1_sub, new_cell_number, cell_number_subcomponent)) %>%
#         group_by(cell_number_subcomponent) %>%
#         mutate(cell_size = sum(n)) %>%
#         ungroup()
#       print("update subcomponent cell number")
#
#       max_cell_1_sub <- calc_max_cell_1_sub()
#       sum_cell_1_sub <- calc_sum_cell_1_sub()
#       print(max_cell_1_sub)
#       print(sum_cell_1_sub)
#     }
#     sub_component_cells <- rbind(sub_component_cells, sub_c_cells)
#     }
# }
#
# head(agency_cells)
# head(sub_component_cells)
#
# weighting_cells <- analysis_dataset_2 %>%
#   group_by(AGENCY, COMPONENT, SUB_COMPONENT) %>%
#   summarize(sub_component_size = n(),
#             num_responses = sum(RESPONSE)) %>%
#   mutate(sub_component_response_rate = num_responses / sub_component_size) %>%
#   left_join(y = agency_cells, by = c("AGENCY", "COMPONENT")) %>%
#   select(-n, -cell_size) %>%
#   left_join(y = sub_component_cells, by = c("AGENCY", "COMPONENT", "SUB_COMPONENT")) %>%
#   select(-n, -cell_size) %>%
#   ungroup() %>%
#   mutate(cell_number_subcomponent = if_else(cell_number_component == 1,
#                                             1,
#                                             cell_number_subcomponent)) %>%
#   arrange(AGENCY, cell_number_component, cell_number_subcomponent)
#
# weighting_cell_size <- weighting_cells %>%
#   group_by(AGENCY, cell_number_component, cell_number_subcomponent) %>%
#   summarize(cell_size = sum(sub_component_size),
#             num_responses = sum(num_responses)) %>%
#   mutate(response_rate = num_responses / cell_size) %>%
#   arrange(AGENCY, cell_number_component, cell_number_subcomponent)
#
# write.csv(x = weighting_cells, file = "weighting_cells.csv", row.names = FALSE)
# write.csv(x = weighting_cell_size, file = "weighting_cell_size.csv", row.names = FALSE)
#
#
# # Merge in weighting sets ----
#
# weighting_cells_for_merge <- weighting_cells %>%
#   select(AGENCY, COMPONENT, SUB_COMPONENT, cell_number_component, cell_number_subcomponent)
#
# analysis_dataset_2 <- analysis_dataset_2 %>%
#   left_join(y = weighting_cells_for_merge, by = c("AGENCY", "COMPONENT", "SUB_COMPONENT"))
#
# colnames(analysis_dataset_2)
#
# # Remove columns that are not needed ----
#
# # We'll keep columns that were used to impute derived variables,
# # so that we can check back and see which records were imputed.
# # We'll also keep job series, job category, and job group in case
# # we want to slice the data by job duties later on.
analysis_dataset_2 <- analysis_dataset_2 %>%
select(-c("SENT", "SENTEMAIL", "WORK_EMAIL", "RECIPIENTEMAIL", "RACE_SHORT_NAME",
"RACE_LONG_NAME", "ETHNICITY_INDICATOR",
"DISABILITY_SHORT_NAME",
"VETERANS_STATUS_LONG_NAME","EDUCATION_LEVEL_SHORT_NAME",
"DEPARTMENT_LONG_NAME", "AGENCY_LONG_NAME",
"TENURE_SHORT_NAME"))
sink("final_colnames_2.txt")
colnames(analysis_dataset_2)
sink()
# oracleDsn <- Sys.getenv('OracleDsnPrd')
# oracleUser <- Sys.getenv("oracleuser")
# oraclePwd <- Sys.getenv("oraclepwd")
# con <- odbcConnect(oracleDsn, uid=oracleUser, pwd=oraclePwd, believeNRows = FALSE) #???, rows_at_time = 500
# sqlSave(con, analysis_dataset_2, tablename = "analysis_dataset_2")
# rm(oraclePwd)
#
# tst_q <- OracleSqlQuery('SELECT * FROM nsmiller."analysis_dataset_2" WHERE rownum <10')
oracleDsn <- Sys.getenv('OracleDsnPrd')
oracleUser <- Sys.getenv("oracleuser")
oraclePwd <- Sys.getenv("oraclepwd")
con <- odbcConnect(oracleDsn, uid=oracleUser, pwd=oraclePwd, believeNRows = FALSE) #???, rows_at_time = 500
sqlSave(con, analysis_dataset_2, tablename = "analysis_dataset_2")
rm(oraclePwd)
tst_q <- OracleSqlQuery('SELECT * FROM nsmiller."analysis_dataset_2" WHERE rownum <10')
View(tst_q)
library(devtools)
setwd("D:/nmiller/pulse")
devtools::document()
